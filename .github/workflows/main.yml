name: Auto test Online Voting Application
on:
  push:
    branches:
      - develop
      - main

env:
  PG_DATABASE: drvl
  PG_USER: postgres
  PG_PASSWORD: Drvl@123

jobs:
  # Label of the container job
  run-tests:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:11.7
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Drvl@123
          POSTGRES_DB: wd-voting-test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3

      # Performs a clean installation of all dependencies in the `package.json` file
      - name: Install dependencies
        run: cd server && npm install

      - name: Run unit tests
        run: cd server && npm test

      - name: Run the app
        id: run-app
        run: |
          cd server
          npm install
          npx sequelize-cli db:drop
          npx sequelize-cli db:create
          npx sequelize-cli db:migrate
          PORT=3000 npm start &
          sleep 5

      - name: Run integration tests
        id: integration-tests
        run: |
          cd server
          npm install cypress cypress-json-results
          npx cypress run

  push-to-docker-hub:
    runs-on: ubuntu-latest
    needs: run-tests
    if: ${{ needs.run-tests.result == 'success' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_LOGIN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: cd server
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/voting:latest

  deploy-to-render:
    runs-on: ubuntu-latest # Define the operating system for the job
    needs: [run-tests, push-to-docker-hub]
    if: ${{ needs.run-tests.result == 'success' }}
    steps:
      - name: Trigger Render deployment webhook #trigger deployment webhook
        run: curl -X GET -d '{}' ${{ secrets.RENDER_DEPLOY_HOOK }}

  deploy-to-netlify:
    runs-on: ubuntu-latest # Define the operating system for the job
    needs: [run-tests, push-to-docker-hub, deploy-to-render]
    if: ${{ needs.run-tests.result == 'success' }}
    steps:
      - name: Trigger Netlify deployment webhook #trigger deployment webhook
        run: curl -X Post -d '{}' ${{ secrets.NETLIFY_DEPLOY_HOOK }}
        # run: curl -X POST -d '{}' https://api.netlify.com/build_hooks/66278763eeaab7b549f04517

  #   deploy-to-netlify:
  #     runs-on: ubuntu-latest
  #     needs: [run-tests, push-to-docker-hub]
  #     if: ${{ needs.run-tests.result == 'success' }} # Condition to run the job only if run-unit-tests job succeeds
  #     steps:
  #       - name: Checkout code
  #         uses: actions/checkout@v3
  #
  #       - name: Install frontend dependencies # Step to install frontend dependencies
  #         run: |
  #           cd client
  #           npm ci
  #
  #       - name: Build app Frontend # Step to build frontend
  #         run: |
  #           cd client
  #           npm run build
  #
  #       - name: Get last commit message
  #         id: commit_message
  #         run: echo "::set-output name=message::$(git log --format=%B -n 1 $GITHUB_SHA)"
  #
  #       - name: Deploy to Netlify
  #         env:
  #           NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
  #           NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  #         run: |
  #           cd Evently
  #           npx netlify-cli env:set VITE_API_ENDPOINT https://evently-backend-jiec.onrender.com/api/v1
  #           npx netlify-cli deploy --prod --dir=build --message "${{ steps.commit_message.outputs.message }}"

  send-slack-notification:
    runs-on: ubuntu-latest
    needs: [run-tests, push-to-docker-hub, deploy-to-render]
    if: ${{ always() }}
    steps:
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        with:
          status: ${{ job.status }}
          mention: "here"
          author_name: "GitHub Actions"
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_HOOK }}
